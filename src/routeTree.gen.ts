/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as LoginImport } from './routes/login';
import { Route as AppRouteImport } from './routes/_app/route';
import { Route as IndexImport } from './routes/index';
import { Route as AppUsersImport } from './routes/_app/users';
import { Route as AppSettingsImport } from './routes/_app/settings';
import { Route as AppDashboardImport } from './routes/_app/dashboard';
import { Route as AppCheckInbookingIdImport } from './routes/_app/check-in$bookingId';
import { Route as AppCabinsImport } from './routes/_app/cabins';
import { Route as AppBookingsImport } from './routes/_app/bookings';
import { Route as AppAccountImport } from './routes/_app/account';
import { Route as AppBookingsBookingIdImport } from './routes/_app/bookings.$bookingId';

// Create/Update Routes

const LoginRoute = LoginImport.update({
    id: '/login',
    path: '/login',
    getParentRoute: () => rootRoute,
} as any);

const AppRouteRoute = AppRouteImport.update({
    id: '/_app',
    getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => rootRoute,
} as any);

const AppUsersRoute = AppUsersImport.update({
    id: '/users',
    path: '/users',
    getParentRoute: () => AppRouteRoute,
} as any);

const AppSettingsRoute = AppSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AppRouteRoute,
} as any);

const AppDashboardRoute = AppDashboardImport.update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => AppRouteRoute,
} as any);

const AppCheckInbookingIdRoute = AppCheckInbookingIdImport.update({
    id: '/check-in$bookingId',
    path: '/check-in$bookingId',
    getParentRoute: () => AppRouteRoute,
} as any);

const AppCabinsRoute = AppCabinsImport.update({
    id: '/cabins',
    path: '/cabins',
    getParentRoute: () => AppRouteRoute,
} as any);

const AppBookingsRoute = AppBookingsImport.update({
    id: '/bookings',
    path: '/bookings',
    getParentRoute: () => AppRouteRoute,
} as any);

const AppAccountRoute = AppAccountImport.update({
    id: '/account',
    path: '/account',
    getParentRoute: () => AppRouteRoute,
} as any);

const AppBookingsBookingIdRoute = AppBookingsBookingIdImport.update({
    id: '/$bookingId',
    path: '/$bookingId',
    getParentRoute: () => AppBookingsRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
    interface FileRoutesByPath {
        '/': {
            id: '/';
            path: '/';
            fullPath: '/';
            preLoaderRoute: typeof IndexImport;
            parentRoute: typeof rootRoute;
        };
        '/_app': {
            id: '/_app';
            path: '';
            fullPath: '';
            preLoaderRoute: typeof AppRouteImport;
            parentRoute: typeof rootRoute;
        };
        '/login': {
            id: '/login';
            path: '/login';
            fullPath: '/login';
            preLoaderRoute: typeof LoginImport;
            parentRoute: typeof rootRoute;
        };
        '/_app/account': {
            id: '/_app/account';
            path: '/account';
            fullPath: '/account';
            preLoaderRoute: typeof AppAccountImport;
            parentRoute: typeof AppRouteImport;
        };
        '/_app/bookings': {
            id: '/_app/bookings';
            path: '/bookings';
            fullPath: '/bookings';
            preLoaderRoute: typeof AppBookingsImport;
            parentRoute: typeof AppRouteImport;
        };
        '/_app/cabins': {
            id: '/_app/cabins';
            path: '/cabins';
            fullPath: '/cabins';
            preLoaderRoute: typeof AppCabinsImport;
            parentRoute: typeof AppRouteImport;
        };
        '/_app/check-in$bookingId': {
            id: '/_app/check-in$bookingId';
            path: '/check-in$bookingId';
            fullPath: '/check-in$bookingId';
            preLoaderRoute: typeof AppCheckInbookingIdImport;
            parentRoute: typeof AppRouteImport;
        };
        '/_app/dashboard': {
            id: '/_app/dashboard';
            path: '/dashboard';
            fullPath: '/dashboard';
            preLoaderRoute: typeof AppDashboardImport;
            parentRoute: typeof AppRouteImport;
        };
        '/_app/settings': {
            id: '/_app/settings';
            path: '/settings';
            fullPath: '/settings';
            preLoaderRoute: typeof AppSettingsImport;
            parentRoute: typeof AppRouteImport;
        };
        '/_app/users': {
            id: '/_app/users';
            path: '/users';
            fullPath: '/users';
            preLoaderRoute: typeof AppUsersImport;
            parentRoute: typeof AppRouteImport;
        };
        '/_app/bookings/$bookingId': {
            id: '/_app/bookings/$bookingId';
            path: '/$bookingId';
            fullPath: '/bookings/$bookingId';
            preLoaderRoute: typeof AppBookingsBookingIdImport;
            parentRoute: typeof AppBookingsImport;
        };
    }
}

// Create and export the route tree

interface AppBookingsRouteChildren {
    AppBookingsBookingIdRoute: typeof AppBookingsBookingIdRoute;
}

const AppBookingsRouteChildren: AppBookingsRouteChildren = {
    AppBookingsBookingIdRoute: AppBookingsBookingIdRoute,
};

const AppBookingsRouteWithChildren = AppBookingsRoute._addFileChildren(AppBookingsRouteChildren);

interface AppRouteRouteChildren {
    AppAccountRoute: typeof AppAccountRoute;
    AppBookingsRoute: typeof AppBookingsRouteWithChildren;
    AppCabinsRoute: typeof AppCabinsRoute;
    AppCheckInbookingIdRoute: typeof AppCheckInbookingIdRoute;
    AppDashboardRoute: typeof AppDashboardRoute;
    AppSettingsRoute: typeof AppSettingsRoute;
    AppUsersRoute: typeof AppUsersRoute;
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
    AppAccountRoute: AppAccountRoute,
    AppBookingsRoute: AppBookingsRouteWithChildren,
    AppCabinsRoute: AppCabinsRoute,
    AppCheckInbookingIdRoute: AppCheckInbookingIdRoute,
    AppDashboardRoute: AppDashboardRoute,
    AppSettingsRoute: AppSettingsRoute,
    AppUsersRoute: AppUsersRoute,
};

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(AppRouteRouteChildren);

export interface FileRoutesByFullPath {
    '/': typeof IndexRoute;
    '': typeof AppRouteRouteWithChildren;
    '/login': typeof LoginRoute;
    '/account': typeof AppAccountRoute;
    '/bookings': typeof AppBookingsRouteWithChildren;
    '/cabins': typeof AppCabinsRoute;
    '/check-in$bookingId': typeof AppCheckInbookingIdRoute;
    '/dashboard': typeof AppDashboardRoute;
    '/settings': typeof AppSettingsRoute;
    '/users': typeof AppUsersRoute;
    '/bookings/$bookingId': typeof AppBookingsBookingIdRoute;
}

export interface FileRoutesByTo {
    '/': typeof IndexRoute;
    '': typeof AppRouteRouteWithChildren;
    '/login': typeof LoginRoute;
    '/account': typeof AppAccountRoute;
    '/bookings': typeof AppBookingsRouteWithChildren;
    '/cabins': typeof AppCabinsRoute;
    '/check-in$bookingId': typeof AppCheckInbookingIdRoute;
    '/dashboard': typeof AppDashboardRoute;
    '/settings': typeof AppSettingsRoute;
    '/users': typeof AppUsersRoute;
    '/bookings/$bookingId': typeof AppBookingsBookingIdRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    '/': typeof IndexRoute;
    '/_app': typeof AppRouteRouteWithChildren;
    '/login': typeof LoginRoute;
    '/_app/account': typeof AppAccountRoute;
    '/_app/bookings': typeof AppBookingsRouteWithChildren;
    '/_app/cabins': typeof AppCabinsRoute;
    '/_app/check-in$bookingId': typeof AppCheckInbookingIdRoute;
    '/_app/dashboard': typeof AppDashboardRoute;
    '/_app/settings': typeof AppSettingsRoute;
    '/_app/users': typeof AppUsersRoute;
    '/_app/bookings/$bookingId': typeof AppBookingsBookingIdRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths:
        | '/'
        | ''
        | '/login'
        | '/account'
        | '/bookings'
        | '/cabins'
        | '/check-in$bookingId'
        | '/dashboard'
        | '/settings'
        | '/users'
        | '/bookings/$bookingId';
    fileRoutesByTo: FileRoutesByTo;
    to:
        | '/'
        | ''
        | '/login'
        | '/account'
        | '/bookings'
        | '/cabins'
        | '/check-in$bookingId'
        | '/dashboard'
        | '/settings'
        | '/users'
        | '/bookings/$bookingId';
    id:
        | '__root__'
        | '/'
        | '/_app'
        | '/login'
        | '/_app/account'
        | '/_app/bookings'
        | '/_app/cabins'
        | '/_app/check-in$bookingId'
        | '/_app/dashboard'
        | '/_app/settings'
        | '/_app/users'
        | '/_app/bookings/$bookingId';
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute;
    AppRouteRoute: typeof AppRouteRouteWithChildren;
    LoginRoute: typeof LoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    AppRouteRoute: AppRouteRouteWithChildren,
    LoginRoute: LoginRoute,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app/route.tsx",
      "children": [
        "/_app/account",
        "/_app/bookings",
        "/_app/cabins",
        "/_app/check-in$bookingId",
        "/_app/dashboard",
        "/_app/settings",
        "/_app/users"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_app/account": {
      "filePath": "_app/account.tsx",
      "parent": "/_app"
    },
    "/_app/bookings": {
      "filePath": "_app/bookings.tsx",
      "parent": "/_app",
      "children": [
        "/_app/bookings/$bookingId"
      ]
    },
    "/_app/cabins": {
      "filePath": "_app/cabins.tsx",
      "parent": "/_app"
    },
    "/_app/check-in$bookingId": {
      "filePath": "_app/check-in$bookingId.tsx",
      "parent": "/_app"
    },
    "/_app/dashboard": {
      "filePath": "_app/dashboard.tsx",
      "parent": "/_app"
    },
    "/_app/settings": {
      "filePath": "_app/settings.tsx",
      "parent": "/_app"
    },
    "/_app/users": {
      "filePath": "_app/users.tsx",
      "parent": "/_app"
    },
    "/_app/bookings/$bookingId": {
      "filePath": "_app/bookings.$bookingId.tsx",
      "parent": "/_app/bookings"
    }
  }
}
ROUTE_MANIFEST_END */
